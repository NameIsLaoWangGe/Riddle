{
  "code": "import { lwg } from \"../Lwg_Template/lwg\";\r\nexport default class UIMain_Person extends Laya.Script {\r\n    constructor() {\r\n        super();\r\n        this.floor_01Switch = false;\r\n        this.floor_02Switch = false;\r\n        this.ladder_01Switch = false;\r\n        this.ladder_02Switch = false;\r\n        this.inAir = false;\r\n        this.targetP = new Laya.Point();\r\n        this._belongX = null;\r\n        this._belongY = null;\r\n        this._belongChange = false;\r\n    }\r\n    onEnable() {\r\n        this.self = this.owner;\r\n        this.selfScene = this.self.scene;\r\n        this.belongRoom = this.selfScene.getChildByName('Room2');\r\n        this.moveDirection = lwg.Enum.PersonDir.right;\r\n        this.self['UIMain_Person'] = this;\r\n        this.rig = this.self.getComponent(Laya.RigidBody);\r\n        this.buffState = {\r\n            stick: false,\r\n        };\r\n        this.setBelongRoom();\r\n    }\r\n    setBelongRoom() {\r\n        for (let index = 0; index < this.selfScene.numChildren; index++) {\r\n            const child = this.selfScene.getChildAt(index);\r\n            if (child.name.substring(0, 4) === 'Room') {\r\n                let dx = Math.abs(child.x - this.self.x);\r\n                let dy = Math.abs(child.y - this.self.y);\r\n                if (dx <= child.width / 2 && dy <= child.height / 2) {\r\n                    this.belongRoom = child;\r\n                    console.log(this.belongRoom);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onTriggerEnter(other, self) {\r\n        if (!lwg.Global._gameStart) {\r\n            return;\r\n        }\r\n        let otherOwner = other.owner;\r\n        let otherOwnerName = otherOwner.name;\r\n        switch (other.label) {\r\n            case 'wall':\r\n                if (this.moveDirection === lwg.Enum.PersonDir.left || this.moveDirection === lwg.Enum.PersonDir.right) {\r\n                    this.changeDirection();\r\n                }\r\n                break;\r\n            case 'floor':\r\n                let belongName = otherOwnerName.substring(otherOwnerName.length - 5, otherOwnerName.length);\r\n                if (this.belongRoom.name === belongName) {\r\n                    if (this.personState === lwg.Enum.MoveState.onLadder) {\r\n                        this.moveDirection = this.beforeLadderDir;\r\n                    }\r\n                    else if (this.personState === lwg.Enum.MoveState.inAir) {\r\n                        this.moveDirection = this.beforeInAirDir;\r\n                    }\r\n                    this.personState = lwg.Enum.MoveState.onFloor;\r\n                    this.currentFloor = otherOwner;\r\n                }\r\n                console.log(otherOwnerName + '地板连接' + this.personState);\r\n                break;\r\n            case 'ladder':\r\n                this.ladderAndPerson(other, self);\r\n                break;\r\n            case 'aisle':\r\n                this.aisleAndPerson(other, self);\r\n                break;\r\n            case 'dog':\r\n                lwg.Global._gameStart = false;\r\n                this.targetP.x = otherOwner.x - this.belongRoom.width / 2;\r\n                this.targetP.y = otherOwner.y - this.belongRoom.height / 2;\r\n                lwg.Global._openInterface('UIDefeated', null, null, null);\r\n                break;\r\n            case 'target':\r\n                lwg.Global._gameStart = false;\r\n                this.targetP.x = otherOwner.x - this.belongRoom.width / 2;\r\n                this.targetP.y = otherOwner.y - this.belongRoom.height / 2;\r\n                lwg.Global._openInterface('UIVictory', null, null, null);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    ladderAndPerson(other, self) {\r\n        let otherOwner = other.owner;\r\n        let otherName = otherOwner.name;\r\n        let otherNamelen = otherOwner.name.length;\r\n        let num = otherOwner.name.substring(otherNamelen - 2, otherNamelen);\r\n        let aisleName = 'up_Aisle_' + num;\r\n        let upAisle = this.belongRoom.getChildByName(aisleName);\r\n        if (!upAisle) {\r\n            return;\r\n        }\r\n        let upOpenSwitch = upAisle['UIMain_Aisle'].openSwitch;\r\n        if (!upOpenSwitch) {\r\n            console.log('通道未打开，不会上梯子！');\r\n        }\r\n        else {\r\n            console.log(otherOwner.name + '连接梯子');\r\n            if (this.personState === lwg.Enum.MoveState.onFloor) {\r\n                this.beforeLadderDir = this.moveDirection;\r\n                this.moveDirection = lwg.Enum.PersonDir.up;\r\n                this.personState = lwg.Enum.MoveState.onLadder;\r\n                console.log('上梯子');\r\n            }\r\n            else {\r\n                if (this.beforeInAirDir === lwg.Enum.PersonDir.left || this.beforeInAirDir === lwg.Enum.PersonDir.right) {\r\n                    this.beforeLadderDir = this.beforeInAirDir;\r\n                    this.personState = lwg.Enum.MoveState.onLadder;\r\n                    this.moveDirection = lwg.Enum.PersonDir.down;\r\n                }\r\n            }\r\n            this.currentLadder = otherOwner;\r\n        }\r\n    }\r\n    aisleAndPerson(other, self) {\r\n        let otherOwner = other.owner;\r\n        let otherName = otherOwner.name;\r\n        let openSwitch = otherOwner['UIMain_Aisle'].openSwitch;\r\n        let connectRoom = otherOwner['UIMain_Aisle'].connectRoom;\r\n        let otherDir = otherName.substring(0, 1);\r\n        let selfDir = this.moveDirection.substring(0, 1);\r\n        if (otherDir === 'l' || otherDir === 'r') {\r\n            if (openSwitch === false) {\r\n                let lrAisle = this.belongRoom.getChildByName(otherOwner.name);\r\n                if (otherOwner === lrAisle) {\r\n                    this.changeDirection();\r\n                }\r\n            }\r\n            else {\r\n                if (otherDir === selfDir) {\r\n                    if (this.belongRoom !== connectRoom) {\r\n                        this.belongRoom = connectRoom;\r\n                        this._belongChange = true;\r\n                        this.beforeInAirDir = this.moveDirection;\r\n                        this.personState = lwg.Enum.MoveState.inAir;\r\n                    }\r\n                }\r\n                else {\r\n                }\r\n            }\r\n        }\r\n        else if (otherDir === 'd' || otherDir === 'u') {\r\n            if (otherDir === 'd') {\r\n                if (openSwitch === false) {\r\n                    console.log('啥也不做！');\r\n                }\r\n                else {\r\n                    if (selfDir === 'l' || selfDir === 'r') {\r\n                        console.log('准备下去');\r\n                        if (this.belongRoom !== connectRoom) {\r\n                            this.belongRoom = connectRoom;\r\n                            this._belongChange = true;\r\n                            this.beforeInAirDir = this.moveDirection;\r\n                            this.personState = lwg.Enum.MoveState.inAir;\r\n                            this.moveDirection = lwg.Enum.PersonDir.down;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (otherDir === 'u') {\r\n                if (openSwitch === false) {\r\n                    let upAisle = this.belongRoom.getChildByName(otherOwner.name);\r\n                    if (otherOwner === upAisle) {\r\n                        console.log('上面不通换方向' + this.personState);\r\n                        this.changeDirection();\r\n                    }\r\n                }\r\n                else {\r\n                    if (otherDir === selfDir) {\r\n                        if (this.belongRoom !== connectRoom) {\r\n                            this.belongRoom = connectRoom;\r\n                            this._belongChange = true;\r\n                            this.beforeInAirDir = this.beforeLadderDir;\r\n                            this.personState = lwg.Enum.MoveState.inAir;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onTriggerExit(other, self) {\r\n        if (!lwg.Global._gameStart) {\r\n            return;\r\n        }\r\n        if (other.label === 'floor') {\r\n            let belongName = other.owner.name.substring(other.owner.name.length - 5, other.owner.name.length);\r\n            if (this.belongRoom.name === belongName) {\r\n                if (this.personState !== lwg.Enum.MoveState.onLadder) {\r\n                    this.beforeInAirDir = this.moveDirection;\r\n                    this.personState = lwg.Enum.MoveState.inAir;\r\n                    this.moveDirection = lwg.Enum.PersonDir.down;\r\n                    console.log(other.owner.name + '退出' + this.personState);\r\n                }\r\n            }\r\n        }\r\n        else if (other.label === 'ladder') {\r\n            let belongName = other.owner.name.substring(other.owner.name.length - 5, other.owner.name.length);\r\n            if (this.belongRoom.name === belongName) {\r\n                if (this.personState === lwg.Enum.MoveState.onFloor) {\r\n                    this.moveDirection = this.beforeFloorDir;\r\n                    console.log(other.owner.name + '退出' + this.personState);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    stateSwitcher() {\r\n    }\r\n    changeDirection() {\r\n        if (this.moveDirection === lwg.Enum.PersonDir.left) {\r\n            this.moveDirection = lwg.Enum.PersonDir.right;\r\n        }\r\n        else if (this.moveDirection === lwg.Enum.PersonDir.right) {\r\n            this.moveDirection = lwg.Enum.PersonDir.left;\r\n        }\r\n        else if (this.moveDirection === lwg.Enum.PersonDir.up) {\r\n            this.moveDirection = lwg.Enum.PersonDir.down;\r\n        }\r\n        else if (this.moveDirection === lwg.Enum.PersonDir.down) {\r\n            this.moveDirection = lwg.Enum.PersonDir.up;\r\n        }\r\n    }\r\n    move() {\r\n        if (this.moveDirection === lwg.Enum.PersonDir.left) {\r\n            this.rig.setVelocity({ x: -2.5, y: 0 });\r\n            let pic = this.self.getChildByName('pic');\r\n            pic.scaleX = -1;\r\n        }\r\n        else if (this.moveDirection === lwg.Enum.PersonDir.right) {\r\n            this.rig.setVelocity({ x: 2.5, y: 0 });\r\n            let pic = this.self.getChildByName('pic');\r\n            pic.scaleX = 1;\r\n        }\r\n        else if (this.moveDirection === lwg.Enum.PersonDir.up) {\r\n            this.rig.setVelocity({ x: 0, y: -6 });\r\n        }\r\n        else if (this.moveDirection === lwg.Enum.PersonDir.down) {\r\n            this.rig.setVelocity({ x: 0, y: 6 });\r\n        }\r\n        if (this.belongRoom) {\r\n            switch (this.personState) {\r\n                case lwg.Enum.MoveState.onFloor:\r\n                    if (this.currentFloor) {\r\n                        let y = this.currentFloor.y + this.belongRoom.y - this.belongRoom.height / 2;\r\n                        this.self.y = y - 20;\r\n                        this.positionOffsetXY();\r\n                    }\r\n                    break;\r\n                case lwg.Enum.MoveState.onLadder:\r\n                    if (this.currentLadder) {\r\n                        let x = this.currentLadder.x + this.belongRoom.x - this.belongRoom.width / 2;\r\n                        this.self.x = x;\r\n                        this.positionOffsetXY();\r\n                    }\r\n                    break;\r\n                case lwg.Enum.MoveState.inAir:\r\n                    this.positionOffsetXY();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    positionOffsetXY() {\r\n        if (!this._belongY || !this._belongX) {\r\n            if (this.belongRoom) {\r\n                this._belongX = this.belongRoom.x;\r\n                this._belongY = this.belongRoom.y;\r\n            }\r\n        }\r\n        else {\r\n            if (this._belongChange) {\r\n                this._belongY = null;\r\n                this._belongChange = false;\r\n            }\r\n            else {\r\n                let x = this.belongRoom.x - this._belongX;\r\n                let y = this.belongRoom.y - this._belongY;\r\n                this.self.x = this.self.x + x;\r\n                this.self.y = this.self.y + y;\r\n                this._belongX = this.belongRoom.x;\r\n                this._belongY = this.belongRoom.y;\r\n            }\r\n        }\r\n    }\r\n    followPerson() {\r\n        if (this.targetP) {\r\n            let x = this.targetP.x + this.belongRoom.x;\r\n            let y = this.targetP.y + this.belongRoom.y;\r\n            this.self.x = x - 50;\r\n            this.self.y = y + 10;\r\n        }\r\n    }\r\n    scopeControl() {\r\n        if (this.belongRoom) {\r\n            if (this.self.x > this.belongRoom.x + this.belongRoom.width / 2 + 20) {\r\n                this.self.x = this.belongRoom.x + this.belongRoom.width / 2 + 20;\r\n            }\r\n            if (this.self.x < this.belongRoom.x - this.belongRoom.width / 2 - 20) {\r\n                this.self.x = this.belongRoom.x - this.belongRoom.width / 2 - 20;\r\n            }\r\n            if (this.self.y > this.belongRoom.y + this.belongRoom.height / 2 + 20) {\r\n                this.self.y = this.belongRoom.y + this.belongRoom.height / 2 + 20;\r\n            }\r\n            if (this.self.y < this.belongRoom.y - this.belongRoom.height / 2 - 20) {\r\n                this.self.y = this.belongRoom.y - this.belongRoom.height / 2 - 20;\r\n            }\r\n        }\r\n    }\r\n    onUpdate() {\r\n        if (!lwg.Global._gameStart) {\r\n            this.rig.setVelocity({ x: 0, y: 0 });\r\n            this.followPerson();\r\n            return;\r\n        }\r\n        this.move();\r\n        this.scopeControl();\r\n    }\r\n    onDisable() {\r\n    }\r\n}\r\n",
  "references": [
    "D:/Game/project/Riddle/Riddle/src/script/Lwg_Template/lwg.ts",
    "D:/Game/project/Riddle/Riddle/src/script/Game/UIVictory.ts"
  ]
}
